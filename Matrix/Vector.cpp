#include "Vector.h"Vector Vector::INVALID_VECTOR = Vector(0,0.0);Rank Vector::size()const{return _size;}T& Vector::operator[](Rank rhs)const{return data[rhs];}bool Vector::operator==(const Vector &rhs)const{    if (_size != rhs.size()) {        return 0;    }//prevent array out of bouds    for (int i = 0; i < _size; ++i) {        if (data[i] != rhs[i]) {            return 0;        }    }    return 1;}bool Vector::operator!=(const Vector &rhs)const{return !(*this == rhs);}Vector Vector::operator+(const Vector &rhs)const{    if (_size == rhs.size()) {        Vector tmp(_size,data);        for (int i = 0; i < _size; ++i) {            tmp[i] += rhs[i];        }        return tmp;    }    return INVALID_VECTOR;//if doesn't match}Vector Vector::operator+(T num)const{    Vector tmp(_size,num);    return *this + tmp;}Vector Vector::operator-()const{    Vector tmp(_size,data);    for (int i = 0; i < _size; ++i) {        tmp[i] = -tmp[i];    }    return tmp;}Vector Vector::operator-(Vector &rhs)const{return *this+(-rhs);}Vector Vector::operator-(T num)const{return *this+(-num);}Vector Vector::operator*(T num)const{    Vector tmp(_size,data);    for (int i = 0; i < _size; ++i) {        tmp[i] = tmp[i]*2;    }    return tmp;}Vector &Vector::operator=(T num){    for (int i = 0; i < _size; ++i) {        data[i] = num;    }    return *this;}Vector &Vector::operator=(const Vector &rhs){    delete []data;    _size = rhs.size();    data = new T[_size];    for (int i = 0; i < _size; ++i) {        data[i] = rhs[i];    }    return *this;}