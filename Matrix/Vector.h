//  Vector.h//  Matrix////  Created by 范志方 on 15/11/12.//  Copyright © 2015年 范志方. All rights reserved.//#ifndef Vector_h#define Vector_h#define T double#define Rank int#include <iostream>class Vector{    Rank _size;    T *data;public:    static Vector INVALID_VECTOR;    Vector():_size(1){//default constructor        data = new T[_size];        for (int i = 0; i < _size; i++) {            data[i] = 0;        }    }    Vector(Rank _size ,T * rhs):_size(_size){//constructor with array        data = new T[_size];        for (int i = 0; i < _size; i++) {            data[i] = rhs[i];        }            }    Vector(Rank _size,T _num):_size(_size){//numeric constructor        data = new T[_size];        for (int i = 0; i < _size; i++) {            data[i] = _num;        }    }    Vector(const Vector& rhs){//copy constructor,necessary!!        _size = rhs._size;        data = new T[_size];        for (int i = 0; i < _size; ++i) {            data[i] = rhs.data[i];        }    }    ~Vector(){        delete []data;    }    Rank size()const;    T& operator[](Rank)const;    bool operator==(const Vector &rhs)const;    bool operator!=(const Vector &rhs)const;    Vector operator+(const Vector &rhs)const;    Vector operator+(T num)const;    Vector operator-()const;    Vector operator-(Vector &rhs)const;    Vector operator-(T num)const;    Vector operator*(T num)const;    Vector& operator=(T num);    Vector& operator=(const Vector &rhs);//    void printVector(){//        for (int i = 0; i < _size; ++i) {//            std::cout << data[i] << ' ';//        }//        std::cout << std::endl;//    }    friend class Matrix;};#endif /* Vector_h */