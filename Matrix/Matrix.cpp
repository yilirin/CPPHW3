////  Matrix.cpp//  Matrix////  Created by 范志方 on 15/11/12.//  Copyright © 2015年 范志方. All rights reserved.//#include "Matrix.h"Matrix Matrix::INVALID_MATRIX = Matrix(0,0,0.0);Matrix Matrix::trans(){    T array[_row*_col];    for (int i = 0; i < _row*_col; ++i) {        array[i] = p2Vector[i/_col][i%_col];    }    Matrix tmp(_col,_row,array);    return tmp;}Matrix Matrix::operator*(T num){    Matrix tmp(_row,_col);    for (int i = 0; i < _row; ++i) {        tmp.p2Vector[i] = p2Vector[i]*2;    }    return tmp;}Vector& Matrix::operator[](Rank r)const{    return p2Vector[r];}bool Matrix::operator==(const Matrix &rhs){    if (_row != rhs._row||_col != rhs._col) {        return 0;    }    for (int i = 0; i < _row; ++i) {        if (p2Vector[i] != rhs[i]) {            return 0;        }    }    return 1;}bool Matrix::operator!=(const Matrix &rhs){return !(*this == rhs);}Matrix Matrix::operator+(const Matrix &rhs){    if (_row != rhs._row||_col != rhs._col) {        return INVALID_MATRIX;    }    Matrix tmp(rhs);    for (int i = 0; i < _row; ++i) {        tmp.p2Vector[i] = tmp.p2Vector[i] + p2Vector[i];    }    return tmp;}Matrix Matrix::operator-()const{    Matrix tmp(*this);    for (int i = 0; i < _row; ++i) {        tmp.p2Vector[i] = -tmp.p2Vector[i];    }    return tmp;}Matrix Matrix::operator-(const Matrix &rhs){    Matrix tmp(-rhs);    return tmp+*this;}Matrix Matrix::operator*(const Matrix &rhs){    Matrix tmp(_row,rhs._col,0.0);    for (int i = 0; i < tmp._row; ++i) {        for (int j = 0; j < tmp._col; ++j) {            T sum = 0;            for (int k = 0; k < _col; ++k) {                sum += p2Vector[i][k]*rhs[k][j];            }            tmp[i][j] = sum;        }    }    return tmp;}