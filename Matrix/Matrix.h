////  Matrix.h//  Matrix////  Created by 范志方 on 15/11/12.//  Copyright © 2015年 范志方. All rights reserved.//#ifndef Matrix_h#define Matrix_h#include "Vector.h"class Matrix{    Vector *p2Vector;    Rank _row;    Rank _col;public:    Matrix(int r = 1,int c = 1, T num = 0):_row(r),_col(c){        p2Vector = new Vector[r];        for (int i = 0; i < _row; ++i){            p2Vector[i] = Vector(_col,num);        }    }    Matrix(int r,int c,T *array):_row(r),_col(c){        p2Vector = new Vector[r];        for (int i = 0; i < _row; ++i){            p2Vector[i] = Vector(_col,0.0);            for (int j = 0; j < _col; ++j) {                p2Vector[i].data[j] = array[i+j];            }        }    }    Matrix(const Vector &v):_row(1),_col(v._size){        p2Vector = new Vector[_row];        p2Vector[0] = v;    }    Matrix(const Matrix &rhs):_row(rhs._row),_col(rhs._col){        p2Vector = new Vector[rhs._row];        for (int i = 0; i < _row; ++i){            p2Vector[i] = rhs.p2Vector[i];        }    }    ~Matrix(){        delete []p2Vector;    }    Rank rows(){return _row;}    Rank cols(){return _col;}    Matrix trans();    Matrix operator*(T num);    bool operator==(const Matrix &rhs);    bool operator!=(const Matrix &rhs);    Matrix operator+(const Matrix &rhs);    Matrix operator-()const;    Matrix operator-(const Matrix &rhs);    Matrix operator*(const Matrix &rhs);    Matrix operator=(Matrix rhs);    Vector& operator[](Rank r)const;    void printMatrix(){        for (int i = 0; i < _row; ++i) {            p2Vector[i].printVector();        }    }    static Matrix INVALID_MATRIX;};#endif /* Matrix_h */